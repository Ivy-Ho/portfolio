/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.7 public/models/64ae7cdfdbec0e3029da2609copy.glb
*/
// HeroAvatar

import { Suspense, useEffect, useRef, useContext } from 'react';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { Canvas, useFrame } from '@react-three/fiber'
import CanvasLoader from '../Loader';
import * as THREE from "three"
import { ScreenContext } from '../../contexts/ScreenContext';

const HeroAvatar = (props) => {

  const group = useRef();

  const { nodes, materials } = useGLTF('models/64ae7cdfdbec0e3029da2609copy.glb')

  const { animations: StandingAnimation } = useFBX("animation/Standing_Idle.fbx")

  StandingAnimation[0].name = "Standing";

  const { actions } = useAnimations(StandingAnimation, group)

  useEffect(() => {
    actions["Standing"].reset().play();
  })

  const { isMobile, isPc } = useContext(ScreenContext);

  useFrame((state) => {
    let target = {};
    if(isMobile) {
      target = new THREE.Vector3(0, -0.2, 0.2);
    }else if (isPc) {
      target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
    }else {
      target = new THREE.Vector3(0, 0.4, 0.2);
    }
    group.current.getObjectByName('Head').lookAt(target);
  })

  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

const HeroAvatarCanvas = () => {

  const { isMobile, isPc } = useContext(ScreenContext);

  let scaleNum = 0;

  if (isMobile) {
    scaleNum = 5.6;
  }else if(isPc) {
    scaleNum = 6.8;
  }else {
    scaleNum = 6.6;
  }

  return (
    <Canvas
      shadows
      frameloop='always'
      dpr={[1, 2]}
      gl={{ preserveDrawingBuffer: true }}
      camera={{
        fov: `${isMobile ? 70 : 60}`,
      }}
    >
      <Suspense fallback={<CanvasLoader />}> 
        <HeroAvatar
          position-y={isMobile ? -9 : -9.9}
          scale= {scaleNum}
        />
        <spotLight 
          color="#d17756"
          position={[-20, 30, 6]}
          angle={Math.PI / 2}
          penumbra={1}
          intensity={1.6}
        />
         <spotLight 
          color="#ba62f9"
          position={[-4, 7, -5]}
          angle={Math.PI / 2}
          penumbra={1}
          intensity={1}
        />
        <ambientLight
          color="#93bff3"
          intensity={0.8}
        />
      </Suspense>
    </Canvas>
  )
}

useGLTF.preload('models/64ae7cdfdbec0e3029da2609.glb')
useFBX.preload('animation/Standing_Idle.fbx')


export default HeroAvatarCanvas